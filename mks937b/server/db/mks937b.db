# substitutions:
#% macro, DEVICE, Device name
#% macro, PORT,   Asyn Port name, e.g. ty_40_0
#% macro, ADDRESS, Controller ADDRESS (001 .. 253)
################################################################################

# In case the unit was changed at the ihm
record(bi, "$(DEVICE):Unit:Trig"){
	field(SCAN, "5 second")
	
	field(FLNK, "$(DEVICE):Unit")
}

# Pressure Unit
#
#% controldesk Pressure Unit readback 

record(mbbi, "$(DEVICE):Unit"){
    field(DESC, "Read Pressure Unit") 
    field(PINI, "YES")
    field(DTYP, "stream")
    field(INP,"@mks937b.proto get_unit($(ADDRESS)) $(PORT)")

    field(PHAS, "0")

    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(ZRST, "Torr")
    field(ONST, "mBAR")
    field(TWST, "PASCAL")
    field(THST, "Micron")    
}

record(mbbo, "$(DEVICE):UnitSp"){
    field(DESC, "Set Pressure Unit")
    field(SCAN, "Passive")
    field(DTYP, "stream")
    field(OUT,"@mks937b.proto set_unit($(ADDRESS)) $(PORT)")

    field(UNSV, "INVALID")
    #The IVOA field specifies an action to take from a number of possible choices when the INVALID alarm is triggered4
    field(IVOA, "Don't drive outputs")


    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(ZRST, "Torr")
    field(ONST, "mBAR")
    field(TWST, "PASCAL")
    field(THST, "Micron")    

    field(FLNK, "$(DEVICE):Unit")
}


record(stringin, "$(DEVICE):ErrMsgType"){
    field(DESC, "Error message as text")
    field(DTYP, "stream")
    field(INP,  "@mks937b.proto errtext $(PORT) ") 
    field(PINI, "YES") 
}
 

record(stringin, "$(DEVICE):SerialNumber"){
    field(DESC, "Unit's serial number")
    field(DTYP, "stream")
    field(INP,  "@mks937b.proto serial_num($(ADDRESS)) $(PORT) ") 
    field(PINI, "YES") 
}
 
################################################################################
# Controller Version
#
#% archiver 10 Monitor
#% controldesk Controller Version readback
record(stringin, "$(DEVICE):CTLV"){
    field(DESC, "Controller Version")
    field(DTYP, "stream")
    field(INP,  "@mks937b.proto ctlv($(ADDRESS)) $(PORT) ") 
    field(PINI, "YES") 
}
 
 record(stringin, "$(DEVICE):SlotAV"){
    field(DESC, "Slot A Version")
    field(DTYP, "stream")
    field(INP,  "@mks937b.proto slotav($(ADDRESS)) $(PORT) ") 
    field(PINI, "YES") 
}
 
 record(stringin, "$(DEVICE):SlotBV"){
    field(DESC, "Slot B Version")
    field(DTYP, "stream")
    field(INP,  "@mks937b.proto slotbv($(ADDRESS)) $(PORT) ") 
    field(PINI, "YES") 
}
 
 record(stringin, "$(DEVICE):SlotCV"){
    field(DESC, "Slot C Version")
    field(DTYP, "stream")
    field(INP,  "@mks937b.proto slotcv($(ADDRESS)) $(PORT) ") 
    field(PINI, "YES") 
}
 
 record(stringin, "$(DEVICE):AIOV"){
    field(DESC, "AIO Version")
    field(DTYP, "stream")
    field(INP,  "@mks937b.proto aiov($(ADDRESS)) $(PORT) ") 
    field(PINI, "YES") 
}
 
 record(stringin, "$(DEVICE):COMMV"){
    field(DESC, "COMM Version")
    field(DTYP, "stream")
    field(INP,  "@mks937b.proto commv($(ADDRESS)) $(PORT) ") 
    field(PINI, "YES") 
}
 

################################################################################
# Module in Slot CC
#
#% controldesk Slot CC smon
record(mbbi, "$(DEVICE):ModuleType-A"){
    field(DESC, "Display the module type")
    field(DTYP, "stream")
    # field(INP,  "@mks937b.proto moda($(ADDRESS)) $(PORT) 0") 
    field(INP,  "@mks937b.proto mod($(ADDRESS),$(DEVICE):ModuleType) $(PORT) 0") 
    field(PINI, "YES")
    field(SCAN, "5 second")
    
    field(ZRST, "Hot Cathode")
    field(ONST, "Cold Cathode")
    field(TWST, "Dual Pirani")
    field(THST, "Dual Cnv Pirani")
    field(FRST, "Dual Thermocpl")
    field(FVST, "Dual Cap Manmtr")
    field(SXST, "Sngl Pirani")
    field(SVST, "Sngl Cnv Pirani")
    field(EIST, "Sngl Thrmcpl")
    field(NIST, "Sngl Cap Manmtr")
    field(TEST, "No Module")
    field(ELST, "Wrong Module") 
    field(ELSV, "MAJOR")
}
################################################################################
# Module in Slot A
#
#% controldesk Slot A smon
record(mbbi, "$(DEVICE):ModuleType-B"){
    field(DESC, "Display the module type")

    field(ZRST, "Hot Cathode")
    field(ONST, "Cold Cathode")
    field(TWST, "Dual Pirani")
    field(THST, "Dual Cnv Pirani")
    field(FRST, "Dual Thermocpl")
    field(FVST, "Dual Cap Manmtr")
    field(SXST, "Sngl Pirani")
    field(SVST, "Sngl Cnv Pirani")
    field(EIST, "Sngl Thrmcpl")
    field(NIST, "Sngl Cap Manmtr")
    field(TEST, "No Module")
    field(ELST, "Wrong Module")
    field(UNSV, "MAJOR")
    field(ZRSV, "NO_ALARM")
    field(ONSV, "NO_ALARM")
    field(TWSV, "NO_ALARM")
    field(THSV, "NO_ALARM")
    field(FRSV, "NO_ALARM")
    field(FVSV, "NO_ALARM")
    field(SXSV, "NO_ALARM")
    field(SVSV, "NO_ALARM")
    field(EISV, "NO_ALARM")
    field(NISV, "NO_ALARM")
    field(TESV, "NO_ALARM")
    field(ELSV, "MAJOR")
}
################################################################################
# Module in Slot B
#
#% controldesk Slot B smon
record(mbbi, "$(DEVICE):ModuleType-C"){
    field(DESC, "Display the module type")
    # field(DTYP, "stream")
    # field(INP,  "@mks937b.proto modc($(ADDRESS)) $(PORT)")  
    # field(PINI, "YES")
    # field(SCAN, "5 second")

    field(ZRST, "Hot Cathode")
    field(ONST, "Cold Cathode")
    field(TWST, "Dual Pirani")
    field(THST, "Dual Cnv Pirani")
    field(FRST, "Dual Thermocpl")
    field(FVST, "Dual Cap Manmtr")
    field(SXST, "Sngl Pirani")
    field(SVST, "Sngl Cnv Pirani")
    field(EIST, "Sngl Thrmcpl")
    field(NIST, "Sngl Cap Manmtr")
    field(TEST, "No Module")
    field(ELST, "Wrong Module")
    field(UNSV, "MAJOR")
    field(ZRSV, "NO_ALARM")
    field(ONSV, "NO_ALARM")
    field(TWSV, "NO_ALARM")
    field(THSV, "NO_ALARM")
    field(FRSV, "NO_ALARM")
    field(FVSV, "NO_ALARM")
    field(SXSV, "NO_ALARM")
    field(SVSV, "NO_ALARM")
    field(EISV, "NO_ALARM")
    field(NISV, "NO_ALARM")
    field(TESV, "NO_ALARM")
    field(ELSV, "MAJOR")
}
################################################################################
record(bi, "$(DEVICE):SensorType:Trig"){
	field(SCAN, "5 second")
	field(FLNK, "$(DEVICE):SensorType-A")
}
record(stringin,"$(DEVICE):SensorType-A") {
    field(PINI, "YES")
    field(DESC, "Display the connected sensor type")
    field(DTYP,"stream")
    field(INP,"@mks937b.proto sta($(ADDRESS)) $(PORT)") 

    field(FLNK, "$(DEVICE):SensorType-B")
} 
record(stringin,"$(DEVICE):SensorType-B") {
    field(PINI, "YES")
    field(DESC, "Display the connected sensor type")
    field(DTYP,"stream")
    field(INP,"@mks937b.proto stb($(ADDRESS)) $(PORT)") 

    field(FLNK, "$(DEVICE):SensorType-C")
} 
record(stringin,"$(DEVICE):SensorType-C") {
    field(PINI, "YES")
    field(DESC, "Display the connected sensor type")
    field(DTYP,"stream")
    field(INP,"@mks937b.proto stc($(ADDRESS)) $(PORT)") 
} 

record(stringin,"$(DEVICE):PressureRb-1s") {
    field(PINI, "YES")
    field(DESC,"Read CCG 1's raw pressure output")
    field(SCAN, "$(SCAN_RATE)")
    field(DTYP,"stream")
    field(INP,"@mks937b_pressure.proto get_pressures($(ADDRESS),$(DEVICE):PressureRb) $(PORT)") 

    field(FLNK, "$(DEVICE):PressureRb-1")
    
} 
record(stringin,"$(DEVICE):PressureRb-2s") {
    field(DESC,"Read CCG 2's raw pressure output")
    field(FLNK, "$(DEVICE):PressureRb-2")
} 
record(stringin,"$(DEVICE):PressureRb-3s") {
    field(DESC,"Read CCG 3's raw pressure output")
    field(FLNK, "$(DEVICE):PressureRb-3")
} 
record(stringin,"$(DEVICE):PressureRb-4s") {
    field(DESC,"Read CCG 4's raw pressure output")
    field(FLNK, "$(DEVICE):PressureRb-4")
} 
record(stringin,"$(DEVICE):PressureRb-5s") {
    field(DESC,"Read CCG 5's raw pressure output")
    field(FLNK, "$(DEVICE):PressureRb-5")
} 
record(stringin,"$(DEVICE):PressureRb-6s") {
    field(DESC,"Read CCG 6's raw pressure output")
    field(FLNK, "$(DEVICE):PressureRb-6")
} 


# record(stringin, "$(DEVICE):RelayStatusRb-1") {
#   field(DESC, "Status of the relay 1")
#   field(DTYP, "stream")
#   field(INP,  "@mks937b_relay.proto get_relay_mode_all($(ADDRESS),$(DEVICE):RelayStatusRb) $(PORT)") 
#   field(PINI, "YES") 
  
# #   field(ZRVL, "0")
# #   field(ONVL, "1")
# #   field(TWVL, "2")

# #   field(ZRST, "CLEAR")
# #   field(ONST, "SET")
# #   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-2") {
#   field(DESC, "Status of the relay 2")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-3") {
#   field(DESC, "Status of the relay 3")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-4") {
#   field(DESC, "Status of the relay 4")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-5") {
#   field(DESC, "Status of the relay 5")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-6") {
#   field(DESC, "Status of the relay 6")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-7") {
#   field(DESC, "Status of the relay 7")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-8") {
#   field(DESC, "Status of the relay 8")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-9") {
#   field(DESC, "Status of the relay 9")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-10") {
#   field(DESC, "Status of the relay 10")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-11") {
#   field(DESC, "Status of the relay 11")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
# record(mbbi, "$(DEVICE):RelayStatusRb-12") {
#   field(DESC, "Status of the relay 12")
  
#   field(ZRVL, "0")
#   field(ONVL, "1")
#   field(TWVL, "2")

#   field(ZRST, "CLEAR")
#   field(ONST, "SET")
#   field(TWST, "ENABLE")
# }
 