# Stream Device Protocol for the MKS 937B Multi-Sensor System
# This protocol uses features defined in Stream Device Version 2
#
# Based on the work by Ian Gillingham - April 2010
#
# $1 = address, Controller address (001 .. 253)
# $2 = channel number: 1 - 5
# $3 = setpoint: 1 - 12


# Query format 
# Command @<aaa><Coommand>?;FF
# Response @<aaa>ACK<Response>;FF

# Set format
# Command @<aaa><Command>!<parameter>;FF
# Response @<aaa>ACK<Response>;FF

locktimeout  = 5000;
terminator   = ";FF";
replytimeout = 1000;
readtimeout  = 1000;
extrainput   = Ignore;

# The 937B appears to have preamble on all commands and responses
# of the form '@<aaa>', where aaa is the unit number (1-254)
# presumably to cater for multidrop RS485 for multiple controllers.
# Default here to assume just one unit (as on RS232). Will need to make this variable if RS485 is ever implemented.
unitid = 1;

# Send an initial dummy command to clear out any garbage the mks has already received.
# This makes it more likely that the first command sent is received OK.
# NB we dont wait for a response to the dummy command because if it didnt arrive (e.g. rs232 unplugged) then
# streams would issue a replyTimeout exception and stop the ioc.
@init{out " ";}


# Use a regular expression to not care about anything before ACK.
# This is important with the MKS firmware update in Feb 2012, where '@' will precede all responses,
# but we still need backward compatibility with units which do not emit '@'.


# COLD CATHODE CONTROL COMMANDS
# Query protection setpoint for channel
get_pro_sp{ 
    out "@\$1PRO\$2?"; 
    in "@\$1ACK%s";
    @mismatch {in "@\$1NAK:%s";}
} 

# Query protection setpoint for channel
set_pro_sp{
    out "@\$1PRO\$2!%E"; 
    in "@\$1ACK%E"; 
    @mismatch {in "@\$1NAK:%s";}
   # @init{ get_pro_sp_val;} 
}

# Query control setpoint for channel
get_con_sp{ 
    out "@\$1CSP\$2?"; 
    in "@\$1ACK%s";

    @mismatch {in "@\$1NAK:%s";}
}
get_con_sp_val{ 
    out "@\$1CSP\$2?"; 
    in "@\$1ACK%s";

    @mismatch {}
}
 
# Set control setpoint for channel
set_con_sp{
    out "@\$1CSP\$2!%E"; 
    in "@\$1ACK%E"; 

    @mismatch {in "@\$1NAK:%s";}
   # @init{get_con_sp_val;}
}

# Query control setpoint hysteresis for channel
get_hys_sp{ 
    out "@\$1CHP\$2?"; 
    in "@\$1ACK%s";

    @mismatch { 
        in "@\$1NAK:%s"; 
    }
}
get_hys_sp_val{ 
    out "@\$1CHP\$2?"; 
    in "@\$1ACK%s";

  #  @mismatch {}
}
 
# Set control setpoint hysteresis for channel
set_hys_sp{
    out "@\$1CHP\$2!%E"; 
    in "@\$1ACK%E"; 
    
    @mismatch { 
        in "@\$1NAK:%s"; 
    }
   # @init{get_hys_sp_val;}
}

# Relay mode, query or set status for relay ($2 1 to 12)
get_con_sp_status{ 
    out "@\$1CSE\$2?"; 
    in "@\$1ACK%s";
    @mismatch {in "@\$1NAK:%s";}
}

set_con_sp_status{ 
    out "@\$1CSE\$2!%{A1|B1|A2|B2|C1|C2|OFF}"; 
    in "@\$1ACK%{A1|B1|A2|B2|C1|C2|OFF}";  

    @init{get_con_sp_status;}
}

# Relay mode, query or set status for relay ($2 1 to 12)
get_con_sp_enable{ 
    out "@\$1CTL\$2?"; 
    in "@\$1ACK%s";
    @mismatch {in "@\$1NAK:%s";}
}
 
set_con_sp_enable{ 
    out "@\$1CTL\$2!%{AUTO|SAFE|OFF}"; 
    in "@\$1ACK%{AUTO|SAFE|OFF}";  

    @init{get_con_sp_enable;}
}
