# Stream Device Protocol for the MKS 937B Multi-Sensor System
# This protocol uses features defined in Stream Device Version 2
#
# Based on the work by Ian Gillingham - April 2010
#
# $1 = address, Controller address (001 .. 253)
# $2 = channel number: 1 - 5
# $3 = setpoint: 1 - 12


# Query format 
# Command @<aaa><Coommand>?;FF
# Response @<aaa>ACK<Response>;FF

# Set format
# Command @<aaa><Command>!<parameter>;FF
# Response @<aaa>ACK<Response>;FF

locktimeout = 5000;
terminator   = ";FF";
replytimeout = 1000;
readtimeout  = 1000;
extrainput   = Ignore;

# The 937B appears to have preamble on all commands and responses
# of the form '@<aaa>', where aaa is the unit number (1-254)
# presumably to cater for multidrop RS485 for multiple controllers.
# Default here to assume just one unit (as on RS232). Will need to make this variable if RS485 is ever implemented.
unitid = 1;

# Send an initial dummy command to clear out any garbage the mks has already received.
# This makes it more likely that the first command sent is received OK.
# NB we dont wait for a response to the dummy command because if it didnt arrive (e.g. rs232 unplugged) then
# streams would issue a replyTimeout exception and stop the ioc.
@init{out " ";}


# Use a regular expression to not care about anything before ACK.
# This is important with the MKS firmware update in Feb 2012, where '@' will precede all responses,
# but we still need backward compatibility with units which do not emit '@'.

# PRESSURE READING COMMANDS 
# Read pressure on channel  ($2 1 to 6)
get_pressure { 
    out "@\$1PR\$2?"; 
    in "%*/ACK/%E"; 
    
    @mismatch {
        in "%*/ACK/%(\$3:STA.VAL){\?.|  \?E|OVER|ATM|<1.00E-11|RP_OFF|OFF|WAIT|L|CTRL_OFF|PROT_OFF|NOGAUGE|MISCONN|NOT|Not|C}";
    }
}
get_pressure_raw { 
    out "@\$1PR\$2?"; 
    in "%*/ACK/%s"; 
}
get_pressure_status { 
    out "@\$1PR\$2?"; 
    in "%*/ACK/%{\?.|  \?E|OVER|ATM|<1.00E-11|RP_OFF|OFF|WAIT|L|CTRL_OFF|PROT_OFF|NOGAUGE|MISCONN|NOT|Not|C}"; 
}

# Read pressures on all channels
get_pressure_all {
    out "@\$1PRZ?"; 
    in "%*/ACK/%s";
}

# Read pressure on channel 'n' and its combination sensor
get_pressure_combination {
    out "@\$1PC\$2?"; 
    in "%*/ACK/%s";
}
