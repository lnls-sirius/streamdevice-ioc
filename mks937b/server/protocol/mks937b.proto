# Stream Device Protocol for the MKS 937B Multi-Sensor System
# This protocol uses features defined in Stream Device Version 2
#
# Based on the work by Ian Gillingham - April 2010
#
# $1 = address, Controller address (001 .. 253)
# $2 = channel number: 1 - 5
# $3 = setpoint: 1 - 12


# Query format 
# Command @<aaa><Coommand>?;FF
# Response @<aaa>ACK<Response>;FF

# Set format
# Command @<aaa><Command>!<parameter>;FF
# Response @<aaa>ACK<Response>;FF

locktimeout = 5000;
terminator   = ";FF";
replytimeout = 1000;
readtimeout  = 1000;
extrainput   = Ignore;

# The 937B appears to have preamble on all commands and responses
# of the form '@<aaa>', where aaa is the unit number (1-254)
# presumably to cater for multidrop RS485 for multiple controllers.
# Default here to assume just one unit (as on RS232). Will need to make this variable if RS485 is ever implemented.
unitid = 1;

# Send an initial dummy command to clear out any garbage the mks has already received.
# This makes it more likely that the first command sent is received OK.
# NB we dont wait for a response to the dummy command because if it didnt arrive (e.g. rs232 unplugged) then
# streams would issue a replyTimeout exception and stop the ioc.
@init{out " ";}


# Use a regular expression to not care about anything before ACK.
# This is important with the MKS firmware update in Feb 2012, where '@' will precede all responses,
# but we still need backward compatibility with units which do not emit '@'.
# Controller parameters
# Pressure unit, Unit=Torr, mBAR, PASCAL, Micron
get_unit { 
    out "@\$1U?"; 
    in "@\$1ACK%{TORR|mBAR|PASCAL|MICRON}";
}

set_unit { 
    out "@\$1U!%{TORR|mBAR|PASCAL|Micron}";
    in "@\$1ACK%{TORR|mBAR|PASCAL|MICRON}"; 
    @init { get_unit; }
}


# Firmware version
# n=1=Slot A; n=2=Slot B; n=3=Slot C
# n=4=AIO; n=5=COMM; n=6=Main


slotav { 
    out "@\$1FV1?"; 
    in "@\$1ACK%s"; 
}
slotbv { 
    out "@\$1FV2?"; 
    in "@\$1ACK%s"; 
}
slotcv { 
    out "@\$1FV3?"; 
    in "@\$1ACK%s"; 
}
aiov { 
    out "@\$1FV4?"; 
    in "@\$1ACK%s"; 
}
commv { 
    out "@\$1FV5?"; 
    in "@\$1ACK%s"; 
}
ctlv { 
    out "@\$1FV6?"; 
    in "@\$1ACK%s"; 
}

# Display the sensor module type. T1, T2, T3=(CC,HC, CM, PR, NC). 
# NC= no connection. T4=(NA, PB, PC)
moda { 
    out "@\$1MT?"; 
    in "@\$1ACK%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC}";
}
modb { 
    out "@\$1MT?"; 
    in "@\$1ACK\?\?,%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC}"; 
}
modc { 
    out "@\$1MT?"; 
    in "@\$1ACK\?\?,\?\?,%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC}"; 
}


# Display yhe connected sensor type on the specified mudule
sta { 
    out "@\$1STA?"; 
    in "@\$1ACK%s";
}
stb {  
    out "@\$1STB?"; 
    in "@\$1ACK%s";
}
stc {  
    out "@\$1STC?"; 
    in "@\$1ACK%s";
}

# Serial Number
serial_num {  
    out "@\$1SN?"; 
    in "@\$1ACK%s";
}

# Prints errors as text
errtext { 
    out "@254SEM!TXT";
    in "@ACK%s";          
}

# Query the channel power status for PR, CP, HC or high voltage status for CC.  $2: channel 1-6
get_enabled{ 
    out "@\$1CP\$2?"; 
    in "@\$1ACK%{OFF|ON}";
}
 
# Turn on/off the channel power for PR, CP, HC, or high voltage for CC). $2: channel 1-6
set_enabled{
    out "@\$1CP\$2!%{OFF|ON}"; 
    in "@\$1ACK%{OFF|ON}"; 

    @init{get_enabled;}
}
