# Stream Device Protocol for the MKS 937B Multi-Sensor System
# This protocol uses features defined in  Stream Device Version 2
#
# Based on the work by Ian Gillingham - April 2010
#
# $1 = address, Controller address (001 .. 253)
# $2 = channel number: 1 - 5
# $3 = setpoint: 1 - 12


# Query format 
# Command @<aaa><Coommand>?;FF
# Response @<aaa>ACK<Response>;FF

# Set format
# Command @<aaa><Command>!<parameter>;FF
# Response @<aaa>ACK<Response>;FF

LockTimeout  = 10000;
Terminator   = ';FF';
ReplyTimeout = 4000; 
ReadTimeout  = 5000;   
extrainput   = Ignore;


# Delay between commands
# A small delay is needed between subsequent commands
Delay = 7;

# The serial address
Addr = "@\$1";

# Send an initial dummy command to clear out any garbage the mks has already received.
# This makes it more likely that the first command sent is received OK.
# NB we dont wait for a response to the dummy command because if it didnt arrive (e.g. rs232 unplugged) then
# streams would issue a replyTimeout exception and stop the ioc.
@init{out " ";}
 
# Controller parameters
# Pressure unit, Unit=Torr, mBAR, PASCAL, Micron
get_unit { 
    wait  $Delay;
    out $Addr, "U?"; 
    in  $Addr, "ACK%{TORR|mBAR|PASCAL|MICRON}";
    wait  $Delay;
}
set_unit { 
    wait  $Delay;
    out $Addr, "U!%{TORR|mBAR|PASCAL|Micron}";
    in  $Addr, "ACK%{TORR|mBAR|PASCAL|MICRON}"; 
    @init { get_unit; }
    wait  $Delay;
}
get_dly { 
    wait  $Delay;
    out $Addr, "DLY?"; 
    in  $Addr, "ACK%f";
    wait  $Delay;
}
set_dly { 
    wait  $Delay;
    out $Addr, "DLY!%f";
    in  $Addr, "ACK%f"; 
    @init { get_dly; }
    wait  $Delay;
}
# Firmware version
# n=1=Slot A; n=2=Slot B; n=3=Slot C
# n=4=AIO; n=5=COMM; n=6=Main
slotav { 
    wait  $Delay;
    out $Addr, "FV1?"; 
    in  $Addr, "ACK%s"; 
    wait  $Delay;
}
slotbv { 
    wait  $Delay;
    out $Addr, "FV2?"; 
    in  $Addr, "ACK%s"; 
    wait  $Delay;
}
slotcv { 
    wait  $Delay;
    out $Addr, "FV3?"; 
    in  $Addr, "ACK%s"; 
    wait  $Delay;
}
aiov { 
    wait  $Delay;
    out $Addr, "FV4?"; 
    in  $Addr, "ACK%s"; 
    wait  $Delay;
}
commv { 
    wait  $Delay;
    out $Addr, "FV5?"; 
    in  $Addr, "ACK%s";
    wait  $Delay;
}
ctlv { 
    wait  $Delay;
    out $Addr, "FV6?"; 
    in  $Addr, "ACK%s";
    wait  $Delay;
}

moda{  out $Addr, "MT?"; in  $Addr, "ACK%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC},\?\?,\?\?,\?\?";}
modb{  out $Addr, "MT?"; in  $Addr, "ACK\?\?,%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC},\?\?,\?\?";}
modc{  out $Addr, "MT?"; in  $Addr, "ACK\?\?,\?\?,%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC},\?\?"; }

sta { 
    wait  $Delay;
    out $Addr, "STA?"; 
    in  $Addr, "ACK%s";
    wait  $Delay;
}
stb {  
    wait  $Delay;
    out $Addr, "STB?"; 
    in  $Addr, "ACK%s";
    wait  $Delay;
}
stc {  
    wait  $Delay;
    out $Addr, "STC?"; 
    in  $Addr, "ACK%s";
    wait  $Delay;
}
# Serial Number
serial_num {  
    wait  $Delay;
    out $Addr, "SN?"; 
    in  $Addr, "ACK%s";
    wait  $Delay;
}
# Prints errors as text
errtext { 
    wait  $Delay;
    out "@254SEM!TXT";
    in  "@ACK%s"; 
    wait  $Delay;         
}
lockIhm { 
    wait  $Delay;
    out $Addr, "LOCK!\$2";
    in  $Addr, "ACK%s"; 
    wait  $Delay;         
} 
# Query the channel power status for PR, CP, HC or high voltage status for CC.  $2: channel 1-6
get_enabled{ 
    wait  $Delay;
    out $Addr, "CP\$2?"; 
    in  $Addr, "ACK%{OFF|ON}";
    wait  $Delay;
}
# Turn on/off the channel power for PR, CP, HC, or high voltage for CC). $2: channel 1-6
set_enabled{
    wait  $Delay;
    out $Addr, "CP\$2!%{OFF|ON}"; 
    in  $Addr, "ACK%{OFF|ON}"; 
    @init{get_enabled;}
    wait  $Delay;
}
# RELAY AND CONTROL SETTINGS COMMANDS
# Relay setpoints ($2 1 to 12)
get_sp { 
    wait  $Delay;
    out $Addr, "SP\$2?"; 
    in  $Addr, "ACK%E"; 
    # @mismatch{in  $Addr, "NAK%s";}
    wait  $Delay;
}
set_sp { 
    wait  $Delay;
    out $Addr, "SP\$2!%0.1E"; 
    in  $Addr, "ACK%E"; 
    @init { get_sp; }
    wait  $Delay;
}
# Relay Hysteresis ($2 1 to 12)
get_relay_hyst { 
    wait  $Delay;
    out $Addr, "SH\$2?"; 
    in  $Addr, "ACK%E"; 
    wait  $Delay;
}
set_relay_hyst { 
    wait  $Delay;
    out $Addr, "SH\$2!%0.1E"; 
    in  $Addr, "ACK%E"; 
    @init { get_relay_hyst; }
    wait  $Delay;
}
# Relay direction ($2 1 to 12)
get_relay_direction { 
    wait  $Delay;
    out $Addr, "SD\$2?"; 
    in  $Addr, "ACK%{ABOVE|BELOW}"; 
    wait  $Delay;
}
set_relay_direction { 
    wait  $Delay;
    out $Addr, "SD\$2!%{ABOVE|BELOW}"; 
    in  $Addr, "ACK%{ABOVE|BELOW}"; 
    @init { get_relay_direction; }
    wait  $Delay;
}
# Relay mode, query or set status for relay ($2 1 to 12)
get_relay_mode { 
    wait  $Delay;
    out $Addr, "EN\$2?";
    in  $Addr, "ACK%{SET|CLEAR|ENABLE}"; 
    wait  $Delay;
}
set_relay_mode { 
    wait  $Delay;
    out $Addr, "EN\$2!%{SET|CLEAR|ENABLE}"; 
    in  $Addr, "ACK%{SET|CLEAR|ENABLE}"; 
    @init { get_relay_mode; }
    wait  $Delay;
}
# get_relay_mode_all { 
#     wait  $Delay;
#     out $Addr, "ENA?"; 
#     in  $Addr, "ACK",
#                 "%c",
#                 "%(\$2-2)c",
#                 "%(\$2-3)c",
#                 "%(\$2-4)c",
#                 "%(\$2-5)c",
#                 "%(\$2-6)c",
#                 "%(\$2-7)c",
#                 "%(\$2-8)c",
#                 "%(\$2-9)c",
#                 "%(\$2-10)c",
#                 "%(\$2-11)c",
#                 "%(\$2-12)c"; 
#     wait  $Delay;
# }


# Query relay setpoint status ($2 1 to 12)
get_relaysp_status { 
    wait  $Delay;
    out $Addr, "SS\$2?"; 
    in  $Addr, "ACK%{SET|CLEAR}"; 
    wait  $Delay;
}
get_relaysp_status_all { 
    wait  $Delay;
    out $Addr, "SSA?"; 
    in  $Addr, "ACK",
                "%(\$2:Relay1\$3)c",
                "%(\$2:Relay2\$3)c",
                "%(\$2:Relay3\$3)c",
                "%(\$2:Relay4\$3)c",
                "%(\$2:Relay5\$3)c",
                "%(\$2:Relay6\$3)c",
                "%(\$2:Relay7\$3)c",
                "%(\$2:Relay8\$3)c",
                "%(\$2:Relay9\$3)c",
                "%(\$2:Relay10\$3)c",
                "%(\$2:Relay11\$3)c",
                "%(\$2:Relay12\$3)c";
    wait  $Delay;
}
# Read pressure on channel  ($2 1 to 6)
get_pressure_raw { 
    wait  $Delay;
    out $Addr, "PR\$2?"; 
    in  $Addr, "ACK%s"; 
    @mismatch {in  $Addr, "NAK";}
    wait  $Delay;
} 

# Read pressure on channel 'n' and its combination sensor 
get_pressure_combination {
    wait  $Delay;
    out $Addr, "PC\$2?"; 
    in  $Addr, "ACK%s";
    wait  $Delay;
} 

# PIRANI AND CONVECTION PIRANI CONTROL COMMANDS
# Query or set a gas correction factor for a CC gauge on
# Channel n. Valid range is from 0.1 to 10.  ($2)  1, 3, 5
# Send and atmospheric pressure to perform ATM calibration
# The PR/CP must be at atmospheric pressure when running ATM calibration
set_atm{ 
    wait  $Delay;
    out $Addr, "ATM\$2?"; 
    in  $Addr, "ACK%E";
    wait  $Delay;
}
# Zero a PR/CP on a channel n. Execute only when  the pressure ios less than 1x10-2 torr
zero_pr_cp{ 
    wait  $Delay;
    out $Addr, "VAC\$2?"; 
    in  $Addr, "ACKOK";
    # @mismatch {in  $Addr, "NAK";}
    wait  $Delay;
}
# -----------------------------------------------------
# COLD CATHODE CONTROL COMMANDS
# Query protection setpoint for channel
get_pro_sp{ 
    wait  $Delay;
    out $Addr, "PRO\$2?"; 
    in  $Addr, "ACK%s";
    @mismatch {in  $Addr, "NAK:%s";}
    wait  $Delay;
} 
get_pro_sp_val{ 
   wait  $Delay;
    out $Addr, "PRO\$2?"; 
    in  $Addr, "ACK%E";
    @mismatch {in  "";}
    wait  $Delay;
} 
# Query protection setpoint for channel
set_pro_sp{
  wait  $Delay;
    out $Addr, "PRO\$2!%E"; 
    in  $Addr, "ACK%E"; 
    # @mismatch {in  $Addr, "NAK:%s";}
    @init{ get_pro_sp_val;} wait  $Delay;
}
# -----------------------------------------------------
# COLD CATHODE CONTROL COMMANDS
# Fast relay
get_frc_sp{ 
   wait  $Delay;
    out $Addr, "FRC\$2?"; 
    in  $Addr, "ACK%s";
    # @mismatch {in  $Addr, "NAK:%s";}wait  $Delay;
} 
get_frc_sp_val{ 
   wait  $Delay;
    out $Addr, "FRC\$2?"; 
    in  $Addr, "ACK%E";
    # @mismatch {in  "";}wait  $Delay;
} 
# Query protection setpoint for channel
set_frc_sp{
   wait  $Delay;
    
    out $Addr, "FRC\$2!%E"; 
    in  $Addr, "ACK%E"; 
    
    # @mismatch {in  $Addr, "NAK:%s";}
    @init{ get_frc_sp_val;} wait  $Delay;
}
# -----------------------------------------------------
# Query control setpoint for channel
get_con_sp{ 
    wait  $Delay;
    out $Addr, "CSP\$2?"; 
    in  $Addr, "ACK%s";
    wait  $Delay;

    # @mismatch {in  $Addr, "NAK:%s";}wait  $Delay;
}
get_con_sp_val{ 
    wait  $Delay;
    out $Addr, "CSP\$2?"; 
    in  $Addr, "ACK%E";
    wait  $Delay;
    # @mismatch {in  "";}wait  $Delay;
}
# Set control setpoint for channel
set_con_sp{
    wait  $Delay;
    out $Addr, "CSP\$2!%E"; 
    in  $Addr, "ACK%E"; 

    # @mismatch {in  $Addr, "NAK:%s";}
    @init{get_con_sp_val;}
    wait  $Delay;
}
# -----------------------------------------------------
# Query control setpoint hysteresis for channel
get_hys_sp{ 
    wait  $Delay;
    out $Addr, "CHP\$2?"; 
    in  $Addr, "ACK%s";
    # @mismatch {in  $Addr, "NAK:%s";}
    wait  $Delay;
}
get_hys_sp_val{ 
    wait  $Delay;
    out $Addr, "CHP\$2?"; 
    in  $Addr, "ACK%E";
    # @mismatch {in  "";}
    
    wait  $Delay;
}
 # Set control setpoint hysteresis for channel
set_hys_sp{
    wait  $Delay;
    out $Addr, "CHP\$2!%E"; 
    in  $Addr, "ACK%E"; 
    
    # @mismatch {in  "";}
    @init{get_hys_sp_val;}
    wait  $Delay;
}
# -----------------------------------------------------
# Relay mode, query or set status for relay ($2 1 to 12)
get_con_sp_status{
    wait  $Delay;
    out $Addr, "CSE\$2?"; 
    in  $Addr, "ACK%{A1|B1|A2|B2|C1|C2|OFF}";  
 
    @mismatch{in  "";}
    wait  $Delay;
}
set_con_sp_status{ 
    wait  $Delay;
    out $Addr, "CSE\$2!%{A1|B1|A2|B2|C1|C2|OFF}"; 
    in  $Addr, "ACK%{A1|B1|A2|B2|C1|C2|OFF}";  

    @init{get_con_sp_status;}
    
    @mismatch{in  "";}
    wait  $Delay;
}
# -----------------------------------------------------
# Relay mode, query or set status for relay ($2 1 to 12)
get_con_sp_enable{ 
    wait  $Delay;
    out $Addr, "CTL\$2?"; 
    in  $Addr, "ACK%{AUTO|SAFE|OFF}";

    @mismatch {in  "";}
    wait  $Delay;
}
set_con_sp_enable{ 
    wait  $Delay;
    out $Addr, "CTL\$2!%{AUTO|SAFE|OFF}"; 
    in  $Addr, "ACK%{AUTO|SAFE|OFF}";  
    @mismatch {in  "";}
    @init{get_con_sp_enable;}
    wait  $Delay;
}
# -----------------------------------------------------