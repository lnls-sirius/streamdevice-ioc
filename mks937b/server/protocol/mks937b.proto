# Stream Device Protocol for the MKS 937B Multi-Sensor System
# This protocol uses features defined in Stream Device Version 2
#
# Based on the work by Ian Gillingham - April 2010
#
# $1 = address, Controller address (001 .. 253)
# $2 = channel number: 1 - 5
# $3 = setpoint: 1 - 12


# Query format 
# Command @<aaa><Coommand>?;FF
# Response @<aaa>ACK<Response>;FF

# Set format
# Command @<aaa><Command>!<parameter>;FF
# Response @<aaa>ACK<Response>;FF

# locktimeout = 10000;
# terminator   = ";FF";
# replytimeout = 4000;
# readtimeout  =  5000;
# extrainput   = Ignore;

Terminator = ';FF';
ReplyTimeout = 2000; 
ReadTimeout = 500;   

# The 937B appears to have preamble on all commands and responses
# of the form '@<aaa>', where aaa is the unit number (1-254)
# presumably to cater for multidrop RS485 for multiple controllers.
# Default here to assume just one unit (as on RS232). Will need to make this variable if RS485 is ever implemented.
unitid = 1;

# Send an initial dummy command to clear out any garbage the mks has already received.
# This makes it more likely that the first command sent is received OK.
# NB we dont wait for a response to the dummy command because if it didnt arrive (e.g. rs232 unplugged) then
# streams would issue a replyTimeout exception and stop the ioc.
@init{out " ";}


# Use a regular expression to not care about anything before ACK.
# This is important with the MKS firmware update in Feb 2012, where '@' will precede all responses,
# but we still need backward compatibility with units which do not emit '@'.
# Controller parameters
# Pressure unit, Unit=Torr, mBAR, PASCAL, Micron
get_unit { 
    wait  7;
    out "@\$1U?"; 
    in "@\$1ACK%{TORR|mBAR|PASCAL|MICRON}";
    wait  7;
}

set_unit { 
    wait  7;
    out "@\$1U!%{TORR|mBAR|PASCAL|Micron}";
    in "@\$1ACK%{TORR|mBAR|PASCAL|MICRON}"; 
    @init { get_unit; }
    wait  7;
}

get_dly { 
    wait  7;
    out "@\$1DLY?"; 
    in "@\$1ACK%f";
    wait  7;
}

set_dly { 
    wait  7;
    out "@\$1DLY!%f";
    in "@\$1ACK%f"; 
    @init { get_dly; }
    wait  7;
}

# Firmware version
# n=1=Slot A; n=2=Slot B; n=3=Slot C
# n=4=AIO; n=5=COMM; n=6=Main
slotav { 
 wait  7;
    out "@\$1FV1?"; 
    in "@\$1ACK%s"; 
    wait  7;
}
slotbv { 
   wait  7;
    out "@\$1FV2?"; 
    in "@\$1ACK%s"; 
    wait  7;
}
slotcv { 
  wait  7;
    out "@\$1FV3?"; 
    in "@\$1ACK%s"; 
    wait  7;
}
aiov { 
 wait  7;
    out "@\$1FV4?"; 
    in "@\$1ACK%s"; 
    wait  7;
}
commv { 
  wait  7;
    out "@\$1FV5?"; 
    in "@\$1ACK%s";
    wait  7;
}
ctlv { 
wait  7;
    out "@\$1FV6?"; 
    in "@\$1ACK%s";
     wait  7;
}

# Display the sensor module type. T1, T2, T3=(CC,HC, CM, PR, NC). 
# NC= no connection. T4=(NA, PB, PC)
# mod { 
#  wait  7;
#     out "@\$1MT?"; 
#     in "@\$1ACK%(\$2-A){HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC},%(\$2-B){HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC},%(\$2-C){HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC}";
# wait  7;
# }

# moda{ wait  7; out "@\$1MT?"; in "@\$1ACK%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC}"; wait  7;}
# modb{ wait  7; out "@\$1MT?"; in "@\$1ACK\?\?,%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC}"; wait  7;}
# modc{ wait  7; out "@\$1MT?"; in "@\$1ACK\?\?,\?\?,%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC}"; wait  7;}
moda{  out "@\$1MT?"; in "@\$1ACK%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC},\?\?,\?\?,\?\?";}
modb{  out "@\$1MT?"; in "@\$1ACK\?\?,%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC},\?\?,\?\?";}
modc{  out "@\$1MT?"; in "@\$1ACK\?\?,\?\?,%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC},\?\?"; }

# mod { 
#     wait  7;
#     out "@\$1MT?"; 
#     in "@\$1ACK%{HC|CC|PR|CV|TC|CM|P1|C1|T1|M1|NC|WC},\?\?,\?\?";
#     wait  7;
# }
# Display yhe connected sensor type on the specified mudule
sta { 
  wait  7;
    out "@\$1STA?"; 
    in "@\$1ACK%s";
    wait  7;
}
stb {  
    wait  7;
    out "@\$1STB?"; 
    in "@\$1ACK%s";
    wait  7;
}
stc {  
  wait  7;
    out "@\$1STC?"; 
    in "@\$1ACK%s";
    wait  7;
}

# Serial Number
serial_num {  
    wait  7;
    out "@\$1SN?"; 
    in "@\$1ACK%s";
    wait  7;
}

# Prints errors as text
errtext { 
    wait  7;
    out "@254SEM!TXT";
    in "@ACK%s"; 
    wait  7;         
}

# Query the channel power status for PR, CP, HC or high voltage status for CC.  $2: channel 1-6
get_enabled{ 
    wait  7;
    out "@\$1CP\$2?"; 
    in "@\$1ACK%{OFF|ON}";
    wait  7;
}
 
# Turn on/off the channel power for PR, CP, HC, or high voltage for CC). $2: channel 1-6
set_enabled{
    wait  7;
    out "@\$1CP\$2!%{OFF|ON}"; 
    in "@\$1ACK%{OFF|ON}"; 
    @init{get_enabled;}
    wait  7;
}


# RELAY AND CONTROL SETTINGS COMMANDS
# Relay setpoints ($2 1 to 12)
get_sp { 
    wait  7;
    out "@\$1SP\$2?"; 
    in "@\$1ACK%E"; 
    # @mismatch{in "@\$1NAK%s";}
    wait  7;
}

set_sp { 
    wait  7;
    out "@\$1SP\$2!%0.1E"; 
    in "@\$1ACK%E"; 
    @init { get_sp; }
    wait  7;
}
 
# Relay Hysteresis ($2 1 to 12)
get_relay_hyst { 
    wait  7;
    out "@\$1SH\$2?"; 
    in "@\$1ACK%E"; 
    wait  7;
}
 set_relay_hyst { 
    wait  7;
    out "@\$1SH\$2!%0.1E"; 
    in "@\$1ACK%E"; 
    @init { get_relay_hyst; }
    wait  7;
 }

# # Relay direction ($2 1 to 12)
get_relay_direction { 
    wait  7;
    out "@\$1SD\$2?"; 
    in "@\$1ACK%{ABOVE|BELOW}"; 
    wait  7;
}

set_relay_direction { 
    wait  7;
    out "@\$1SD\$2!%{ABOVE|BELOW}"; 
    in "@\$1ACK%{ABOVE|BELOW}"; 
    # For CC and HC the relay is fixed to bellow !
    # @mismatch{
        # in "@\$1NAK"; 
    # }
    @init { get_relay_direction; }
    wait  7;
}

    
# # Relay mode, query or set status for relay ($2 1 to 12)
get_relay_mode { 
    wait  7;
    out "@\$1EN\$2?";
    in "@\$1ACK%{SET|CLEAR|ENABLE}"; 
    wait  7;
}

# get_relay_mode_all{
#     out "@\$1ENA?";
#     in "@\$1ACK%c%(\$2-2)c%(\$2-3)c%(\$2-4)c%(\$2-5)c%(\$2-6)c%(\$2-7)c%(\$2-8)c%(\$2-9)c%(\$2-10)c%(\$2-11)c%(\$2-12)c"; 
#     #in "@\$1ACK%{CLEAR|SET|ENABLE}%(\$2-2){CLEAR|SET|ENABLE}%(\$2-3){CLEAR|SET|ENABLE}%(\$2-4){CLEAR|SET|ENABLE}%(\$2-5){CLEAR|SET|ENABLE}%(\$2-6){CLEAR|SET|ENABLE}%(\$2-7){CLEAR|SET|ENABLE}%(\$2-8){CLEAR|SET|ENABLE}%(\$2-9){CLEAR|SET|ENABLE}%(\$2-10){CLEAR|SET|ENABLE}%(\$2-11){CLEAR|SET|ENABLE}%(\$2-12){CLEAR|SET|ENABLE}"; 
# }
set_relay_mode { 
    wait  7;
    out "@\$1EN\$2!%{CLEAR|SET|ENABLE}"; 
    in "@\$1ACK%{SET|CLEAR|ENABLE}"; 
    @init { get_relay_mode; }
    wait  7;
}

# Query relay setpoint status ($2 1 to 12)
get_relaysp_status { 
    wait  7;
    out "@\$1SS\$2?"; 
    in "@\$1ACK%{SET|CLEAR}"; 
    wait  7;
}
 
#@todo: Implementar statsus do rele ...

# PRESSURE READING COMMANDS 
# Read pressure on channel  ($2 1 to 6)
get_pressure_raw { 
    wait  7;
    out "@\$1PR\$2?"; 
    in "@\$1ACK%s"; 
    # @mismatch {in "@\$1NAK:%s";}
    wait  7;
} 

get_pressures {
    wait  7;
    out "@\$1PRZ?";
    in "@\$1ACK%s %(\$2-2s)s %(\$2-3s)s %(\$2-4s)s %(\$2-5s)s %(\$2-6s)s";
    wait  7;
}
 
get_pressure_array { 
    # separator=" ";
    wait  7;
    out "@\$1PRZ?"; 
    in "@\$1ACK%s %s %s %s %s %s"; 
    # @mismatch { in "@\$1NAK:%s"; }
    wait  7;
}

# Read pressure on channel 'n' and its combination sensor 
get_pressure_combination {
    wait  7;
    out "@\$1PC\$2?"; 
    in "@\$1ACK%s";
    # @mismatch {    in "@\$1NAK:%s"; }
    wait  7;
} 


# PIRANI AND CONVECTION PIRANI CONTROL COMMANDS
# Query or set a gas correction factor for a CC gauge on
# Channel n. Valid range is from 0.1 to 10.  ($2)  1, 3, 5
# todo: UCn


# Send and atmospheric pressure to perform ATM calibration
# The PR/CP must be at atmospheric pressure when running ATM calibration
set_atm{ 
    wait  7;
    out "@\$1ATM\$2?"; 
    in "@\$1ACK%E";
    wait  7;
}
# Zero a PR/CP on a channel n. Execute only when  the pressure ios less than 1x10-2 torr
zero_pr_cp{ 
  wait  7;
    out "@\$1VAC\$2?"; 
    in "@\$1ACKOK";
    # @mismatch {in "@\$1NAK";}
    wait  7;
}
# -----------------------------------------------------
# COLD CATHODE CONTROL COMMANDS
# Query protection setpoint for channel
get_pro_sp{ 
    wait  7;
    out "@\$1PRO\$2?"; 
    in "@\$1ACK%s";
    @mismatch {in "@\$1NAK:%s";}
    wait  7;
} 
get_pro_sp_val{ 
   wait  7;
    out "@\$1PRO\$2?"; 
    in "@\$1ACK%E";
    @mismatch {in "";}
    wait  7;
} 
# Query protection setpoint for channel
set_pro_sp{
  wait  7;
    out "@\$1PRO\$2!%E"; 
    in "@\$1ACK%E"; 
    # @mismatch {in "@\$1NAK:%s";}
    @init{ get_pro_sp_val;} wait  7;
}
# -----------------------------------------------------
# COLD CATHODE CONTROL COMMANDS
# Fast relay
get_frc_sp{ 
   wait  7;
    out "@\$1FRC\$2?"; 
    in "@\$1ACK%s";
    # @mismatch {in "@\$1NAK:%s";}wait  7;
} 
get_frc_sp_val{ 
   wait  7;
    out "@\$1FRC\$2?"; 
    in "@\$1ACK%E";
    # @mismatch {in "";}wait  7;
} 
# Query protection setpoint for channel
set_frc_sp{
   wait  7;
    
    out "@\$1FRC\$2!%E"; 
    in "@\$1ACK%E"; 
    
    # @mismatch {in "@\$1NAK:%s";}
    @init{ get_frc_sp_val;} wait  7;
}
# -----------------------------------------------------
# Query control setpoint for channel
get_con_sp{ 
    wait  7;
    out "@\$1CSP\$2?"; 
    in "@\$1ACK%s";
    wait  7;

    # @mismatch {in "@\$1NAK:%s";}wait  7;
}
get_con_sp_val{ 
    wait  7;
    out "@\$1CSP\$2?"; 
    in "@\$1ACK%E";
    wait  7;
    # @mismatch {in "";}wait  7;
}
# Set control setpoint for channel
set_con_sp{
    wait  7;
    out "@\$1CSP\$2!%E"; 
    in "@\$1ACK%E"; 

    # @mismatch {in "@\$1NAK:%s";}
    @init{get_con_sp_val;}wait  7;
    wait  7;
}
# -----------------------------------------------------
# Query control setpoint hysteresis for channel
get_hys_sp{ 
    wait  7;
    out "@\$1CHP\$2?"; 
    in "@\$1ACK%s";
    # @mismatch {in "@\$1NAK:%s";}
    wait  7;
}
get_hys_sp_val{ 
  wait  7;
    out "@\$1CHP\$2?"; 
    in "@\$1ACK%E";
    # @mismatch {in "";}
    
    wait  7;
}
 # Set control setpoint hysteresis for channel
set_hys_sp{
    wait  7;
    out "@\$1CHP\$2!%E"; 
    in "@\$1ACK%E"; 
    
    # @mismatch {in "";}
    @init{get_hys_sp_val;}
    wait  7;
}
# -----------------------------------------------------
# Relay mode, query or set status for relay ($2 1 to 12)
get_con_sp_status{
    
    wait  7;
    out "@\$1CSE\$2?"; 
    in "@\$1ACK%{A1|B1|A2|B2|C1|C2|OFF}";  
 
    @mismatch{in "";}
    
    wait  7;
}

set_con_sp_status{ 
    wait  7;
    out "@\$1CSE\$2!%{A1|B1|A2|B2|C1|C2|OFF}"; 
    in "@\$1ACK%{A1|B1|A2|B2|C1|C2|OFF}";  

    @init{get_con_sp_status;}
    
    @mismatch{in "";}
    wait  7;
}
# -----------------------------------------------------
# Relay mode, query or set status for relay ($2 1 to 12)
get_con_sp_enable{ 
    wait  7;
    out "@\$1CTL\$2?"; 
    in "@\$1ACK%{AUTO|SAFE|OFF}";

    @mismatch {in "";}
    wait  7;
}
 
set_con_sp_enable{ 
    wait  7;
    out "@\$1CTL\$2!%{AUTO|SAFE|OFF}"; 
    in "@\$1ACK%{AUTO|SAFE|OFF}";  

    @mismatch {in "";}
    @init{get_con_sp_enable;}
    wait  7;
}
# -----------------------------------------------------