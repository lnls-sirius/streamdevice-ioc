# Stream Device Protocol for the MKS 937B Multi-Sensor System
# This protocol uses features defined in Stream Device Version 2
#
# Based on the work by Ian Gillingham - April 2010
#
# $1 = address, Controller address (001 .. 253)
# $2 = channel number: 1 - 5
# $3 = setpoint: 1 - 12


# Query format 
# Command @<aaa><Coommand>?;FF
# Response @<aaa>ACK<Response>;FF

# Set format
# Command @<aaa><Command>!<parameter>;FF
# Response @<aaa>ACK<Response>;FF

locktimeout = 5000;
replytimeout = 1000;
readtimeout  = 1000;

terminator   = ";FF";
extrainput   = Ignore;

# The 937B appears to have preamble on all commands and responses
# of the form '@<aaa>', where aaa is the unit number (1-254)
# presumably to cater for multidrop RS485 for multiple controllers.
# Default here to assume just one unit (as on RS232). Will need to make this variable if RS485 is ever implemented.
unitid = 1;

# Send an initial dummy command to clear out any garbage the mks has already received.
# This makes it more likely that the first command sent is received OK.
# NB we dont wait for a response to the dummy command because if it didnt arrive (e.g. rs232 unplugged) then
# streams would issue a replyTimeout exception and stop the ioc.
@init{out " ";}


# Use a regular expression to not care about anything before ACK.
# This is important with the MKS firmware update in Feb 2012, where '@' will precede all responses,
# but we still need backward compatibility with units which do not emit '@'.

###########################################################################



# RELAY AND CONTROL SETTINGS COMMANDS
# Relay setpoints ($2 1 to 12)
get_sp { 
    wait  10;
    out "@\$1SP\$2?"; 
    in "@\$1ACK%E"; 
    
    @mismatch{in "@\$1NAK%s";}
    
    wait  10;
}

set_sp { 
    wait  10;
    out "@\$1SP\$2!%0.1E"; 
    in "@\$1ACK%E"; 
    
    @init { get_sp; }
    wait  10;
}
 
# Relay Hysteresis ($2 1 to 12)
get_relay_hyst { 
    wait  10;
    out "@\$1SH\$2?"; 
    in "@\$1ACK%E"; 
    wait  10;
}
 set_relay_hyst { 
    wait  10;
    out "@\$1SH\$2!%0.1E"; 
    in "@\$1ACK%E"; 

    @init { get_relay_hyst; }
    wait  10;
 }

# # Relay direction ($2 1 to 12)
get_relay_direction { 
    wait  10;
    out "@\$1SD\$2?"; 
    in "@\$1ACK%{ABOVE|BELOW}"; 
    wait  10;
}

set_relay_direction { 
    wait  10;

    out "@\$1SD\$2!%{ABOVE|BELOW}"; 
    in "@\$1ACK%{ABOVE|BELOW}"; 
    
    # For CC and HC the relay is fixed to bellow !
    @mismatch{
        in "@\$1NAK"; 
    }
    @init { get_relay_direction; }
    wait  10;
}

    
# # Relay mode, query or set status for relay ($2 1 to 12)
get_relay_mode { 
    wait  10;
    out "@\$1EN\$2?";
    in "@\$1ACK%{SET|CLEAR|ENABLE}"; 
    wait  10;
}

# get_relay_mode_all{
#     out "@\$1ENA?";
#     in "@\$1ACK%c%(\$2-2)c%(\$2-3)c%(\$2-4)c%(\$2-5)c%(\$2-6)c%(\$2-7)c%(\$2-8)c%(\$2-9)c%(\$2-10)c%(\$2-11)c%(\$2-12)c"; 
#     #in "@\$1ACK%{CLEAR|SET|ENABLE}%(\$2-2){CLEAR|SET|ENABLE}%(\$2-3){CLEAR|SET|ENABLE}%(\$2-4){CLEAR|SET|ENABLE}%(\$2-5){CLEAR|SET|ENABLE}%(\$2-6){CLEAR|SET|ENABLE}%(\$2-7){CLEAR|SET|ENABLE}%(\$2-8){CLEAR|SET|ENABLE}%(\$2-9){CLEAR|SET|ENABLE}%(\$2-10){CLEAR|SET|ENABLE}%(\$2-11){CLEAR|SET|ENABLE}%(\$2-12){CLEAR|SET|ENABLE}"; 
# }



set_relay_mode { 
    wait  10;
    out "@\$1EN\$2!%{CLEAR|SET|ENABLE}"; 
    in "@\$1ACK%{SET|CLEAR|ENABLE}"; 

    @init { get_relay_mode; }
    wait  10;
}

# Query relay setpoint status ($2 1 to 12)
get_relaysp_status { 
    wait  10;
    out "@\$1SS\$2?"; 
    in "@\$1ACK%{SET|CLEAR}"; 
    wait  10;
}
 
#@todo: Implementar statsus do rele ...