
clear_stream_ioc(){
    # Clear stram-ioc folder
    pushd ${TOP}/iocBoot
        for filename in *.cmd; do
            if [[ ${filename} =~ ${CMD_KEY}(.*).cmd ]]; then
                rm ${filename}
                echo Removed old content: ${filename}
            fi
        done
    popd
}

run_ioc(){
    procServPort=${BASE_PROCSERV_PORT}
    pushd ${TOP}/iocBoot
        for filename in *; do
            if [[ ${filename} =~ ${CMD_KEY}(.*).cmd ]]; then 
                procServPort=$((procServPort + 1))
                procServ --chdir ${TOP}/iocBoot ${procServPort} ./${filename}  
                echo Init procServ at port ${procServPort} ${filename}
            fi
        done 
    popd
}

copy_to_stream_device(){
    # Clear stream-ioc folder
    clear_stream_ioc 

    PROTOCOL="protocol"
    IOC_BOOT="iocBoot"
    DB="database"
    
    cp -R db/. ${IOC_FOLDER}/${DB}/
    cp -R protocol/. ${IOC_FOLDER}/${PROTOCOL}/

    chmod -R 777 cmd/
    cp -R cmd/. ${IOC_FOLDER}/${IOC_BOOT}/
}

current_envs(){
    echo "Current Enviroments:"
    echo "      HOME_DIR $HOME_DIR"
    echo "      TOP $TOP"
    echo "      BASE_PROCSERV_PORT $BASE_PROCSERV_PORT"
}

build(){
    # Clear the /cmd folder
    rm -r cmd/*

    if [[ -z "${TOP}" ]]; then
        IOC_FOLDER="/opt/stream-ioc/"  
    else
        IOC_FOLDER=${TOP}
    fi

    pushd template
        ./generate.py \
            --base-epics-ca-port ${BASE_EPICS_CA_SERVER_PORT}\
            --cmd-prefix ${CMD_KEY}\
            --top ${IOC_FOLDER} 
    popd

    copy_to_stream_device
} 