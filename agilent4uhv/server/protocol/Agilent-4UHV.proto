# Agilent-4UHV.proto

# Communication protocol for Agilent 4UHV Ion Pump Controller. This is based on the work of Pete
# Owens from the Science and Technology Facilities Council (STFC).

# The timeout involved in reading operations is 200 ms
LockTimeout  = 10000;
ReplyTimeout = 200;
ReadTimeout  = 50;

READ = 0x30;
WRITE = 0x31;

WIN_DISABLED = 0x35;
DATA_TYPE_ERROR = 0x33;
UNKNOWN_WINDOW = 0x32;

CRC = "%01<xor>";
##################################################
#                   FAST READINGS                #
##################################################
# Channel current reading
getCurrent {
    MaxInput = 19;
    out STX, $1, "8\$21", $READ, ETX, $CRC;
    in STX, "\?", "8\$21", $READ, "%10g", ETX, $CRC;
}

# Channel voltage reading
getVoltage {
    MaxInput = 15;
    out STX, $1, "8\$20", $READ, ETX, $CRC;
    in STX, "\?", "8\$20", $READ, "%06d", ETX, $CRC;
}

# HV temperature - channel 1
getHVTemperature1 {
    MaxInput = 15;
    out STX, $1, "801", $READ, ETX, $CRC;
    in STX, "\?", "801", $READ, "%06d", ETX, $CRC;
}

# HV temperature - channel 2
getHVTemperature2 {
    MaxInput = 15;
    out STX, $1, "802", $READ, ETX, $CRC;
    in STX, "\?", "802", $READ, "%06d", ETX, $CRC;
}

# HV temperature - channel 3
getHVTemperature3 {
    MaxInput = 15;
    out STX, $1, "808", $READ, ETX, $CRC;
    in STX, "\?", "808", $READ, "%06d", ETX, $CRC;
}

# HV temperature - channel 4
getHVTemperature4 {
    MaxInput = 15;
    out STX, $1, "809", $READ, ETX, $CRC;
    in STX, "\?", "809", $READ, "%06d", ETX, $CRC;
}


##################################################################
#                           SLOW READINGS                        #
##################################################################
# Power Max
# WIN_DISABLED = 0x35;
# DATA_TYPE_ERROR = 0x33;
# UNKNOWN_WINDOW = 0x32; 

# Channel pressure reading
getPressure {
    MaxInput = 19;
    out STX, $1, "8\$22", $READ, ETX, $CRC;
    in STX, "\?", "8\$22", $READ, "%10g", ETX, $CRC;
}

getPowerMax {
    MaxInput = 15;
    out STX, $1, "6\$22", $READ, ETX, $CRC;
    in STX, "\?", "6\$22", $READ, "%06d", ETX, $CRC;
}
setPowerMax {
    MaxInput = 6;
    out STX, $1, "6\$22", $WRITE, "%06d", ETX, $CRC;
    in STX, "\?", ACK, ETX, $CRC;
    # @init { getPowerMax; }
    @mismatch {in STX, "\?", "%(\$3)i", ETX, $CRC;}
}

# V Target
getVTarget {
    MaxInput = 15;
    out STX, $1, "6\$23", $READ, ETX, $CRC;
    in STX, "\?", "6\$23", $READ, "%06d", ETX, $CRC;
}
setVTarget {
    MaxInput = 6;
    out STX, $1, "6\$23", $WRITE, "%06d", ETX, $CRC;
    in STX, "\?", ACK, ETX, $CRC; 
    @mismatch {in STX, "\?", "%(\$3)i", ETX, $CRC;}
}

# I Protect
getIProtect {
    MaxInput = 15;
    out STX, $1, "6\$24", $READ, ETX, $CRC;
    in STX, "\?", "6\$24", $READ, "%06d", ETX, $CRC;
}
setIProtect {
    MaxInput = 6;
    out STX, $1, "6\$24", $WRITE, "%06d", ETX, $CRC;
    in STX, "\?", ACK, ETX, $CRC;
    # @init { getIProtect; }
    @mismatch {in STX, "\?", "%(\$3)i", ETX, $CRC;}
}

# Setpoint
getSepoint {
    MaxInput = 19;
    out STX, $1, "6\$25", $READ, ETX, $CRC;
    in STX, "\?", "6\$25", $READ, "%10e", ETX, $CRC;
}
setSepoint {
    MaxInput = 6;
    out STX, $1, "6\$25", $WRITE, "%10e", ETX, $CRC;
    in STX, "\?", ACK, ETX, $CRC;
    # @init { getSepoint; }
    @mismatch {in STX, "\?", "%(\$3)i", ETX, $CRC;}
}

# Error code reading
getErrorCode {
    out STX, $1, "505", $WRITE, "00000\$2", ETX, $CRC;
    in STX, "\?", ACK, ETX, $CRC;
    
    out STX, $1, "206", $READ, ETX, $CRC; 
    in STX, "\?", "206", $READ, "%06d", ETX, $CRC;
}

# Fan temperature
getFanTemperature {
    MaxInput = 15;
    out STX, $1, "800", $READ, ETX, $CRC;
    in STX, "\?", "800", $READ, "%06d", ETX, $CRC;
}

# Operating mode (autostart on/off) readback
getMode {
    MaxInput = 19;
    out STX, $1, "601", $READ, ETX, $CRC;
    in STX, "\?", "601", $READ, "%10d", ETX, $CRC;
}
setMode {
    MaxInput = 6;
    out STX, $1, "601", $WRITE, "%010d", ETX, $CRC;
    in STX, "\?", ACK, ETX, $CRC;
    # @init { getMode; } 
}

# Device model
getModel {
    MaxInput = 19;
    out STX, $1, "319", $READ, ETX, $CRC;
    in STX, "\?", "319", $READ, "%10c", ETX, $CRC;
}

# "Protect" reading
getProtect {
    MaxInput = 19;
    out STX, $1, "602", $READ, ETX, $CRC;
    in STX, "\?", "602", $READ, "%10b", ETX, $CRC;
}

# Device serial number
getSerialNumber {
    MaxInput = 19;
    out STX, $1, "323", $READ, ETX, $CRC;
    in STX, "\?", "323", $READ, "%10c", ETX, $CRC;
}

# "Step" reading
getStep {
    MaxInput = 19;
    out STX, $1, "603", $READ, ETX, $CRC;
    in STX, "\?", "603", $READ, "%10b", ETX, $CRC;
}

# Unit readback
getUnit {
    MaxInput = 15;
    out STX, $1, "600", $READ, ETX, $CRC;
    in STX, "\?", "600", $READ, "%06d", ETX, $CRC;
}
setUnit {
    MaxInput = 6;
    out STX, $1, "600", $WRITE, "%06d", ETX, $CRC;
    in STX, "\?", ACK, ETX, $CRC;
    # @init { getUnit; }
}

# Device number
getDeviceNumber {
    out STX, $1, "6\$20", $READ, ETX, $CRC;
    in STX, "\?", "6\$20", $READ, "%06d", ETX, $CRC;
}
setDeviceNumber {
    MaxInput = 6;
    out STX, $1, "6\$20", $WRITE, "%06d", ETX, $CRC;
    in STX, "\?", ACK, ETX, $CRC;
    # @init { getDeviceNumber; }
    @mismatch {in STX, "\?", "%(\$3)i", ETX, $CRC;}
}

# Channel voltage reading on/off
getHVOnOff {
    MaxInput = 10;
    out STX, $1, "01\$2", $READ, ETX, $CRC;
    in STX, "\?", "01\$2", $READ, "%i", ETX, $CRC;
}  
setHVOnOff {
    MaxInput = 6;
    out STX, $1, "01\$2",  $WRITE, "%d", $CRC;
    in STX, "\?", ACK, ETX, $CRC;
    # @init { getHVOnOff; }
    @mismatch {in STX, "\?", "%(\$3)i", ETX, $CRC;}

} 