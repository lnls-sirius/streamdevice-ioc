# SPIxCONV.db
# Record definition for all digital and analog channels. Developed for SPIxCONV version 1.1 and newer.

#==================
# Steps
#==================
record(longout, "$(PREFIX):Steps"){
    field(SCAN, "Passive")
    field(VAL, "4")
}
#==================
# Voltage Trigger
#==================
record(longout, "$(PREFIX):VoltageTrigger"){
    field(SCAN, "Passive")
    field(VAL, "$(STEP_TRIGGER)")
}
#==================
# Soft record
#==================
record(ao, "$(PREFIX):Voltage-SP"){
    field(EGU, "Volt")
    field(AOFF, "-10.0")
    field(ASLO, "0.00007629423635191479459684")
    field(EOFF, "0.0")
    field(ESLO, "$(VOLTAGE_FACTOR)")
    field(LINR, "LINEAR")
    field(PREC, "1")    # Display Precision
    field(SCAN, "Passive")
    field(FLNK, "$(PREFIX):Voltage-BAK")
    #-------------------------------------------
    # alarms configuration
    field(HHSV, "MAJOR")
    field(HSV, "MINOR")
    field(LSV, "MINOR")
    field(LLSV, "MAJOR")
    field(DRVH, "$(VOLTAGE_FACTOR)0")
    field(DRVL, "0")
    field(HOPR, "$(VOLTAGE_FACTOR)0")
    field(LOPR, "0")
    field(HIHI, "$(VOLTAGE_FACTOR)0")
    field(HIGH, "$(VOLTAGE_FACTOR)0")
    field(LOW, "0")
    field(LOLO, "0")
}
#==================
# Voltage Reference
#==================
record(calc, "$(PREFIX):Voltage-BAK"){
    field(SCAN, "Passive")
    field(INPA, "$(PREFIX):RawVoltage-SP")
    field(CALC, "A")
    field(FLNK, "$(PREFIX):CheckStep")
}
#==================
# Check Steps
#==================
record(calcout, "$(PREFIX):CheckStep"){
    field(SCAN, "Passive")
    field(INPA, "$(PREFIX):Voltage-SP")
    field(INPB, "$(PREFIX):RawVoltage-SP")
    field(INPC, "$(PREFIX):VoltageTrigger")  # limiar voltage to trigger steps
    field(INPD, "0")    # straight
    field(INPE, "1")    # steps
    field(CALC, "((A - B) > C) ? E : D")
    field(OOPT, "Every Time")
    field(DOPT, "Use CALC")
    field(ODLY, "0")
    field(FLNK, "$(PREFIX):Counter")
}
#==================
# Counter
#==================
record(calcout, "$(PREFIX):Counter"){
    field(VAL, "0")
    field(SCAN, "Passive")
    field(INPA, "$(PREFIX):Counter")
    field(INPB, "$(PREFIX):Steps")
    field(INPC, "$(PREFIX):CheckStep")
    field(INPD, "1")
    # Counter = (1 - CheckStep)*Steps + CheckStep*(Counter + 1)
    field(CALC, "((D-C)*B + C*(A+D)) % B")
    field(OOPT, "Every Time")
    field(DOPT, "Use CALC")
    field(ODLY, "0")
    field(FLNK, "$(PREFIX):CheckCounter")
}
#==================
# Check Counter
#==================
record(calcout, "$(PREFIX):CheckCounter"){
    field(SCAN, "Passive")
    field(INPA, "$(PREFIX):Counter")
    field(INPB, "$(PREFIX):Steps")
    field(INPC, "0")    # counting
    field(INPD, "1")    # finished
    # Counter == 0?
    field(CALC, "A = C? D : C")
    field(OOPT, "Every Time")
    field(DOPT, "Use CALC")
    field(ODLY, "0")
    field(FLNK, "$(PREFIX):NewVoltage-SP")
}
#==================
# NewVoltage-SP
#==================
record(calcout, "$(PREFIX):NewVoltage-SP"){
    field(SCAN, "Passive")
    field(INPA, "$(PREFIX):Voltage-SP")
    field(INPB, "$(PREFIX):Voltage-BAK")
    field(INPC, "$(PREFIX):CheckCounter")
    field(INPD, "$(PREFIX):Counter")
    field(INPE, "$(PREFIX):Steps")
    field(INPF, "1")
    # NewVoltage-SP = (1 - CheckCounter)*[B + Counter*(A-B)/Steps] + CheckCounter*SoftVoltage-SP
    field(CALC, "((F-C)*(B + D*(A-B)/E)) + C*A")
    field(OOPT, "Every Time")
    field(DOPT, "Use CALC")
    field(FLNK, "$(PREFIX):StopCriteria")
}
#==================
# Stop Criteria
#==================
record(calcout, "$(PREFIX):StopCriteria"){
    field(SCAN, "Passive")
    field(INPA, "$(PREFIX):Voltage-SP")
    field(INPB, "$(PREFIX):NewVoltage-SP")
    field(INPC, "3")    # implement output && increment counter && CONTINUE
    field(INPD, "5")    # implement output && clear counter && END
    # NewVoltage-SP == SoftVoltage-SP?
    field(CALC, "(A = B)? D : C")
    field(OOPT, "Every Time")
    field(DOPT, "Use CALC")
    field(FLNK, "$(PREFIX):SelectOutput")
}
#==================
# Sequence 
#==================
record(seq, "$(PREFIX):SelectOutput"){
    field(SCAN, "Passive")
    field(DOL1, "$(PREFIX):NewVoltage-SP")
    #field(DOL2, "")
    field(DOL3, "0")
    field(LNK1, "$(PREFIX):RawVoltage-SP")
    #field(LNK2, "")
    field(LNK3, "$(PREFIX):Counter")
    field(DLY1, "0")
    field(SELM, "Mask")
    field(SELL, "$(PREFIX):StopCriteria")
    field(FLNK, "$(PREFIX):Fanout")
}
#==================
# Fanout
#==================
record(fanout, "$(PREFIX):Fanout"){
    field(SCAN, "Passive")
    field(LNK1, "$(PREFIX):RawVoltage-SP")
    field(LNK2, "$(PREFIX):Delay")
    field(SELM, "Mask")
    field(SELL, "$(PREFIX):StopCriteria")
}
#==================
# Delay
#==================
record(calcout, "$(PREFIX):Delay"){
    field(VAL, "0")
    field(SCAN, "Passive")
    field(OOPT, "Every Time")
    # !!! DELAY BETWEEN STEPS !!!
#    field(ODLY, "1")
    field(ODLY, "$(STEP_DELAY)")
    field(FLNK, "$(PREFIX):Counter")
}

#==============================================================================
#   ANALOG OUT
#==============================================================================
record(ao, "$(PREFIX):RawVoltage-SP") {
    field(DESC, "analog out parameter")
    field(DTYP, "stream")
    field(EGU, "Volt")
    field(AOFF, "-10.0")
    field(ASLO, "0.00007629423635191479459684")
    field(EOFF, "0.0")
    field(ESLO, "$(VOLTAGE_FACTOR)")
    field(OUT, "@SPIxCONV.proto set_analog_output($(SPIxCONV_ADDRESS)) socket_spixconv")
    field(LINR, "LINEAR")
    field(PREC, "1")                            # Display Precision
    field(SCAN, "Passive")
#    field(HOPR, "10.0")
#    field(LOPR, "-10.0")
    #-------------------------------------------
    # alarms configuration
    field(HHSV, "MAJOR")
    field(HSV, "MINOR")
    field(LSV, "MINOR")
    field(LLSV, "MAJOR")
    field(DRVH, "$(VOLTAGE_FACTOR)0")
    field(DRVL, "0")
    field(HOPR, "$(VOLTAGE_FACTOR)0")
    field(LOPR, "0")
    field(HIHI, "$(VOLTAGE_FACTOR)0")
    field(HIGH, "$(VOLTAGE_FACTOR)0")
    field(LOW, "0")
    field(LOLO, "0")
}
#------------------------------------------------------------------------------
record(ai, "$(PREFIX):Voltage-RB") {
    field(DESC, "read analog out setpoint")     # Description
    field(DTYP, "stream")                       # Device Type
    field(EGU,  "Volt")                         # Engineering Units
    # DAC and ADC calibration (applied to raw value):
    # calibration is already done when requesting a read/write command!
    #   --> functions dac.write() and adc.read()
    # adjust conversion from binary code to voltage:
    field(ASLO, "0.00007629423635191479459684") # Calibration Slope
    field(AOFF, "-10.0")                        # Calibration Offset
    # adjust conversion to voltage power supply range:
    field(ESLO, "$(VOLTAGE_FACTOR)")            # Conversion Slope
    field(EOFF, "0.0")                          # Conversion Offset
    field(INP,  "@SPIxCONV.proto read_analog_output($(SPIxCONV_ADDRESS)) socket_spixconv")
    field(LINR, "LINEAR")                       # Type of Conversion
    field(PINI, "YES")                          # Process at Initialization
    field(PREC, "1")                            # Display Precision
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
}

#==============================================================================
#   ANALOG IN
#==============================================================================
# measure according to the high voltage supply range
record(ai, "$(PREFIX):Voltage-Mon") {
    field(DESC, "analog in parameter")          # Description
    field(DTYP, "stream")                       # Device Type
    field(EGU,  "Volt")                         # Engineering Units
    # DAC and ADC calibration (applied to raw value):
    # calibration is already done when requesting a read/write command!
    #   --> functions dac.write() and adc.read()
    # adjust conversion from binary code to voltage:
    field(ASLO, "0.00007629423635191479459684") # Calibration Slope
    field(AOFF, "-10.0")                        # Calibration Offset
    # adjust conversion to voltage power supply range:
    field(ESLO, "$(VOLTAGE_FACTOR)")            # Conversion Slope
    field(EOFF, "0.0")                          # Conversion Offset
    field(INP,  "@SPIxCONV.proto read_analog_input($(SPIxCONV_ADDRESS)) socket_spixconv")
    field(LINR, "LINEAR")                       # Type of Conversion
    field(PINI, "YES")                          # Process at Initialization
    field(PREC, "1")                            # Display Precision
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
    field(SMOO, "0.5")                          # Smoothing factor from 0 to 1 (0: no smoothing; 1: value never change)
}
#==============================================================================
#   DIGITAL PORT A
#==============================================================================
#***************************************
#   LOCAL/REMOTE (1 INPUT)
#***************************************
#-------------------
# value retrieved from HW
#-------------------
record(bi, "$(PREFIX):RawCtrlMode-Mon"){
    field(DESC, "Raw control mode retrieved from HW")
    field(INP, "@SPIxCONV.proto read_portA_digital_input_bit($(SPIxCONV_ADDRESS),0) socket_spixconv")
    field(SCAN, "$(SCAN_RATE)")
    field(DTYP, "stream")
    field(PINI, "YES")                         # Process at Initialization
    field(ZNAM, "Local")                       # Zero Name
    field(ONAM, "Remote")                      # One Name
    field(FLNK, "$(PREFIX):CalcCtrlMode-Mon")
}
#-------------------
# bit inverter
#-------------------
record(calcout, "$(PREFIX):CalcCtrlMode-Mon") {
    field(DESC, "Control mode inverter")
    field(SCAN, "Passive")                 # Scanning Rate
    field(INPA, "$(PREFIX):RawCtrlMode-Mon")
    field(CALC, "A XOR 1")
    field(DOPT, "Use CALC")
    field(OOPT, "Every Time")
    field(OUT, "$(PREFIX):CtrlMode-Mon")
    field(FLNK, "$(PREFIX):CtrlMode-Mon")
}
#-------------------
# OPI CtrlMode value
#-------------------
record(bi, "$(PREFIX):CtrlMode-Mon"){
    field(DESC, "Control mode")
    field(INP, "$(PREFIX):CalcCtrlMode-Mon")
    field(DTYP, "Raw Soft Channel")
    field(SCAN, "Passive")
    field(ZNAM, "Remote")                       # Zero Name
    field(ONAM, "Local")                        # One Name
}
#-------------------
# control mode label
#-------------------
record(stringout, "$(PREFIX):CtrlModeLabel-Cte") {
    field(DESC, "Control Mode label")
    field(VAL, "Control Mode")
}
#***************************************
#   INTERLOCKS (7 INPUTS)
#***************************************
# interlock signal
#-------------------
record(bi, "$(PREFIX):Intlk1-Mon") {
    field(DESC, "Interlock signal 1")
    field(INP, "@SPIxCONV.proto read_portA_digital_input_bit($(SPIxCONV_ADDRESS),1) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(PINI, "YES")                          # Process at Initialization
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
    field(ZNAM, "Fail")                         # Zero Name
    field(ONAM, "Ok")                           # One Name
}
#-------------------
# interlock label
#-------------------
record(stringout, "$(PREFIX):Intlk1Label-Cte") {
    field(DESC, "Interlock 1 label")
    field(VAL, "Switch module")
}
#------------------------------------------------------------------------------
# interlock signal
#-------------------
record(bi, "$(PREFIX):Intlk2-Mon") {
    field(DESC, "Interlock signal 2")
    field(INP, "@SPIxCONV.proto read_portA_digital_input_bit($(SPIxCONV_ADDRESS),2) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(PINI, "YES")                          # Process at Initialization
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
    field(ZNAM, "Fail")                         # Zero Name
    field(ONAM, "Ok")                           # One Name
}
#-------------------
# interlock label
#-------------------
record(stringout, "$(PREFIX):Intlk2Label-Cte") {
    field(DESC, "Interlock 2 label")
    field(VAL, "AC CPFL OFF")
}
#------------------------------------------------------------------------------
# interlock signal
#-------------------
record(bi, "$(PREFIX):Intlk3-Mon") {
    field(DESC, "Interlock signal 3")
    field(INP, "@SPIxCONV.proto read_portA_digital_input_bit($(SPIxCONV_ADDRESS),3) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(PINI, "YES")                          # Process at Initialization
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
    field(ZNAM, "Fail")                         # Zero Name
    field(ONAM, "Ok")                           # One Name
}
#-------------------
# interlock label
#-------------------
record(stringout, "$(PREFIX):Intlk3Label-Cte") {
    field(DESC, "Interlock 3 label")
    field(VAL, "Temperature")
}
#------------------------------------------------------------------------------
# interlock signal
#-------------------
record(bi, "$(PREFIX):Intlk4-Mon") {
    field(DESC, "Interlock signal 4")
    field(INP, "@SPIxCONV.proto read_portA_digital_input_bit($(SPIxCONV_ADDRESS),4) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(PINI, "YES")                          # Process at Initialization
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
    field(ZNAM, "Fail")                         # Zero Name
    field(ONAM, "Ok")                           # One Name
}
#-------------------
# interlock label
#-------------------
record(stringout, "$(PREFIX):Intlk4Label-Cte") {
    field(DESC, "Interlock 4 label")
    field(VAL, "Personnel protection")
}
#------------------------------------------------------------------------------
# interlock signal
#-------------------
record(bi, "$(PREFIX):Intlk5-Mon") {
    field(DESC, "Interlock signal 5")
    field(INP, "@SPIxCONV.proto read_portA_digital_input_bit($(SPIxCONV_ADDRESS),5) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(PINI, "YES")                          # Process at Initialization
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
    field(ZNAM, "Fail")                         # Zero Name
    field(ONAM, "Ok")                           # One Name
}
#-------------------
# interlock label
#-------------------
record(stringout, "$(PREFIX):Intlk5Label-Cte") {
    field(DESC, "Interlock 5 label")
    field(VAL, "HVPS Overcurrent")
}
#------------------------------------------------------------------------------
# interlock signal
#-------------------
record(bi, "$(PREFIX):Intlk6-Mon") {
    field(DESC, "Interlock signal 6")
    field(INP, "@SPIxCONV.proto read_portA_digital_input_bit($(SPIxCONV_ADDRESS),6) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(PINI, "YES")                          # Process at Initialization
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
    field(ZNAM, "Fail")                         # Zero Name
    field(ONAM, "Ok")                           # One Name
}
#-------------------
# interlock label
#-------------------
record(stringout, "$(PREFIX):Intlk6Label-Cte") {
    field(DESC, "Interlock 6 label")
    field(VAL, "HVPS Overvoltage")
}
#------------------------------------------------------------------------------
# interlock signal
#-------------------
record(bi, "$(PREFIX):Intlk7-Mon") {
    field(DESC, "Interlock signal 7")
    field(INP, "@SPIxCONV.proto read_portA_digital_input_bit($(SPIxCONV_ADDRESS),7) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(PINI, "YES")                          # Process at Initialization
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
    field(ZNAM, "Fail")                         # Zero Name
    field(ONAM, "Ok")                           # One Name
}
#-------------------
# interlock label
#-------------------
record(stringout, "$(PREFIX):Intlk7Label-Cte") {
    field(DESC, "Interlock 7 label")
    field(VAL, "External")
}
#==============================================================================
#   DIGITAL PORT B
#==============================================================================
#***************************************
#   TURN ON/OFF POWER SUPPLY (1 OUTPUT)
#***************************************
record(bo, "$(PREFIX):PwrState-Sel") {
    field(DESC, "Turn ON/OFF HVPS")
    field(OUT, "@SPIxCONV.proto set_portB_digital_output_bit($(SPIxCONV_ADDRESS),1) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(SCAN, "Passive")                      # Scanning Rate
    field(ZNAM, "Off")                          # Zero Name
    field(ONAM, "On")                           # One Name
}
#-------------------
# PV label
#-------------------
record(stringout, "$(PREFIX):PwrStateLabel1-Cte") {
    field(DESC, "PV label 1")
    field(VAL, "Turn ON/OFF HVPS")
}
#***************************************
#   TRIGGER (1 OUTPUT)
#***************************************
record(bo, "$(PREFIX):Pulse-Sel") {
    field(DESC, "Turn ON/OFF trigger pulse")
    field(OUT, "@SPIxCONV.proto set_portB_digital_output_bit($(SPIxCONV_ADDRESS),2) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(SCAN, "Passive")                      # Scanning Rate
    field(ZSV, "NO_ALARM")
    field(OSV, "NO_ALARM")
    field(ZNAM, "Off")                          # Zero Name
    field(ONAM, "On")                           # One Name
}
#-------------------
# PV label
#-------------------
record(stringout, "$(PREFIX):PulseLabel-Cte") {
    field(DESC, "PV label 2")
    field(VAL, "Turn ON/OFF trigger pulse")
}
#***************************************
#   TRIGGER --> OUTPUT read
#***************************************
# the record is set as input, but it is actually reading the output value set previously
record(bi, "$(PREFIX):Pulse-Sts") {
    field(DESC, "Read if trigger pulse is enabled or not")
    field(INP, "@SPIxCONV.proto read_portB_digital_output_bit($(SPIxCONV_ADDRESS),2) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
    field(ZSV, "NO_ALARM")
    field(OSV, "NO_ALARM")
    field(ZNAM, "Off")                          # Zero Name
    field(ONAM, "On")                           # One Name
}
#***************************************
#   RESET (1 OUTPUT)
#***************************************
record(bo, "$(PREFIX):Reset-Cmd") {
    field(DESC, "Reset the controller unit")
    field(OUT, "@SPIxCONV.proto reset($(SPIxCONV_ADDRESS)) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(SCAN, "Passive")                      # Scanning Rate
    field(HIGH, "0.2")                          # Seconds to Hold High
    field(ZNAM, "Running")                      # Zero Name
    field(ONAM, "Resetting")                    # One Name
}
#-------------------
# PV label
#-------------------
record(stringout, "$(PREFIX):ResetLabel-Cte") {
    field(DESC, "PV label 3")
    field(VAL, "Reset the controller unit")
}
#------------------------------------------------------------------------------
record(bi, "$(PREFIX):PwrState-Sts") {
    field(DESC, "Read power supply status")
    field(INP, "@SPIxCONV.proto read_portB_digital_input_bit($(SPIxCONV_ADDRESS),7) socket_spixconv")
    field(DTYP, "stream")                       # Device Type
    field(PINI, "YES")                          # Process at Initialization
    field(SCAN, "$(SCAN_RATE)")                 # Scanning Rate
    field(ZNAM, "Off")                          # Zero Name
    field(ONAM, "On")                           # One Name
}
#-------------------
# PV label
#-------------------
record(stringout, "$(PREFIX):PwrStateLabel2-Cte") {
    field(DESC, "PV label 7")
    field(VAL, "HVPS Status")
}
#==============================================================================
#   ON/OFF STATE
#==============================================================================
record(bo, "$(PREFIX):OnOff") {
    field(DESC, "On/Off IOC status")
    field(SCAN, "Passive")
    field(VAL, "1")
    field(ZNAM, "Off")                          # Zero Name
    field(ONAM, "On")                           # One Name
}
#==============================================================================
#***************************************
#   INTERLOCKS (7 INPUTS)
#***************************************
#record(waveform, "$(PREFIX):IntlkLabels-Cte") {
#record(stringout, "$(PREFIX):IntlkLabels-Cte") {
#    field(DESC, "Interlock labels")
#    field(DTYP, "stream")
#    field(FTVL, "STRING")
#    #field(FTVL, "UCHAR")
#    field(INP, "@SPIxCONV.proto read_interlock_labels socket_spixconv")
#    field(NELM, "7")
#    #field(NELM, "256")
#    field(PINI, "YES")
#}
