#!/bin/bash
clear_stream_ioc(){
    echo clear stream ioc $1
    # Clear stram-ioc folder
    pushd ${TOP}/iocBoot
        for filename in *.cmd; do
            if [[ ${filename} =~ $1(.*).cmd ]]; then
                rm ${filename}
                echo Removed old content: ${filename}
            fi
        done
    popd
}

run_ioc_unix_bridge(){
    # Params:
    # :1 : CMD_KEY
    ADDR_LIST=
    SOCKET_PATH_LIST=
    PORT=4161

    echo
    echo
    echo UNIX Bind and .cmd configuration
    for filename in $(ls ${TOP}/iocBoot | grep -P "^${1}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.cmd$"); do
            ip=$(echo $filename | sed -e "s/${1}//" -e "s/\.cmd//")

            if [[ ${ip} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
                    socket_dir="/var/tmp/$filename"
                    socket_dir_skp=$(echo unix://${socket_dir} | sed 's/\//\\\//g')

                    ADDR_LIST="${ADDR_LIST} ${ip}:${PORT}"
                    SOCKET_PATH_LIST="${SOCKET_PATH_LIST} ${socket_dir}"

                    echo $(date)" Configuring ${TOP}/iocBoot/${filename} to use socket ${socket_dir}."
                    sed -i -r "s/drvAsynIPPortConfigure\s*\(\"[^)]+?\s*\)/drvAsynIPPortConfigure\(\"IPPort0\",\"${socket_dir_skp}\"\)/g" ${TOP}/iocBoot/${filename}
            fi
    done
    echo
    echo
    echo $(date)" Command: ./common/tcpUnix.py --socket-path-list ${SOCKET_PATH_LIST} --address-list ${ADDR_LIST} &"
    ./common/tcpUnix.py --socket-path-list ${SOCKET_PATH_LIST} --address-list ${ADDR_LIST} &
    sleep 3

    echo
    echo
    procServPort=${BASE_PROCSERV_PORT}
    for filename in $(ls ${TOP}/iocBoot | grep -P "^${1}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.cmd$"); do
        if [[ ${ip} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then

                procServPort=$((procServPort + 1))
                echo $(date) Init procServ. Command: procServ --chdir ${TOP}/iocBoot ${procServPort} ${TOP}/iocBoot/${filename}
                procServ --chdir ${TOP}/iocBoot ${procServPort} ${TOP}/iocBoot/${filename}
        fi
    done
    export BASE_PROCSERV_PORT=${procServPort}
}

run_ioc(){
    # Params:
    # :1 : CMD_KEY
    echo
    echo
    procServPort=${BASE_PROCSERV_PORT}
    for filename in $(ls ${TOP}/iocBoot | grep -P "^${1}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.cmd$"); do
        ip=$(echo $filename | sed -e "s/${1}//" -e "s/\.cmd//")
        if [[ ${ip} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then

                procServPort=$((procServPort + 1))

                 echo $(date)" Configuring ${TOP}/iocBoot/${filename} to use socket ${ip}:4161."
                sed -i -r "s/drvAsynIPPortConfigure\s*\(\"[^)]+?\s*\)/drvAsynIPPortConfigure\(\"IPPort0\",\"${ip}:4161\"\)/g" ${TOP}/iocBoot/${filename}

                echo $(date)' Init procServ. Command: procServ --chdir '${TOP}/iocBoot ${procServPort} ${TOP}/iocBoot/${filename}
                procServ --chdir ${TOP}/iocBoot ${procServPort} ${TOP}/iocBoot/${filename}
        fi
    done
    export BASE_PROCSERV_PORT=${procServPort}
}

copy_to_stream_device(){
    # Params:
    # :1 : CMD_KEY
    # :2 : TOP
    # Clear stream-ioc folder
    echo "Copy Stream Device"
    clear_stream_ioc $1

    PROTOCOL="protocol"
    IOC_BOOT="iocBoot"
    DB="database"

    chmod -R 777 server/cmd/

    cp -R server/db/. ${2}/${DB}/
    cp -R server/protocol/. ${2}/${PROTOCOL}/
    cp -R server/cmd/. ${2}/${IOC_BOOT}/
}

build(){
    # Params:
    # :1 : Folder
    # :2 : CMD_KEY
    # :3 : Base Epics CA Port

    # Clear the /cmd folder
    pushd $1
        echo "Generating ${1} ${2} TOP=${TOP}"
        ./generate.py \
            --epics-ca-port-increase \
            --base-epics-ca-port ${3}\
            --cmd-prefix $2\
            --top ${TOP}

        copy_to_stream_device $2 $TOP
    popd
}
