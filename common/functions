#!/bin/bash
clear_stream_ioc(){
    echo clear stream ioc $1
    # Clear stram-ioc folder
    pushd ${TOP}/iocBoot
        for filename in *.cmd; do
            if [[ ${filename} =~ $1(.*).cmd ]]; then
                rm ${filename}
                echo Removed old content: ${filename}
            fi
        done
    popd
}

run_ioc_unix_bridge(){
    # Params:
    # :1 : CMD_KEY
    ADDR_LIST=
    SOCKET_PATH_LIST=
    echo UNIX Bind and .cmd configuration
    for filename in $(ls ${TOP}/iocBoot | sort  | grep -P "^${1}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[0-9]{1,5}\.cmd$"); do
            ip=$(echo $filename | sed -e "s/${1}//" -e "s/\.cmd//")

            if [[ ${ip} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[0-9]{1,5}$ ]]; then
                    socket_dir="/var/tmp/$filename"
                    socket_dir_skp=$(echo unix://${socket_dir} | sed 's/\//\\\//g')

                    ADDR_LIST="${ADDR_LIST} ${ip}"
                    SOCKET_PATH_LIST="${SOCKET_PATH_LIST} ${socket_dir}"

                    set -x
                    sed -i -r "s/drvAsynIPPortConfigure\s*\(\"[^)]+?\s*\)/drvAsynIPPortConfigure\(\"IPPort0\",\"${socket_dir_skp}\"\)/g" ${TOP}/iocBoot/${filename}
                    set +x
            fi
    done

    set -x
    ./common/tcpUnix.py --socket-path-list ${SOCKET_PATH_LIST} --address-list ${ADDR_LIST} --reconnect-interval 30 &
    sleep 25
    set +x

    echo
    procServPort=${BASE_PROCSERV_PORT}
    for filename in $(ls ${TOP}/iocBoot | sort | grep -P "^${1}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[0-9]{1,5}\.cmd$"); do
        procServPort=$((procServPort + 1))
        export BASE_PROCSERV_PORT=${procServPort}
        set -x
        procServ --allow -L  log/${filename} --chdir ${TOP}/iocBoot ${procServPort} ${TOP}/iocBoot/${filename}
        set +x
    done
}

run_ioc(){
    # Params:
    # :1 : CMD_KEY
    # @todo: Make this thing clear !!
    echo
    echo
    procServPort=${BASE_PROCSERV_PORT}
    for filename in $(ls ${TOP}/iocBoot | sort  | grep -P "^${1}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:?[0-9]{0,5}\.cmd$"); do
        ip=$(echo $filename | sed -e "s/${1}//" -e "s/\.cmd//")
        if [[ ${ip} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[0-9]{1,5}$ ]]; then
                procServPort=$((procServPort + 1))
                set -x
                procServ --allow -L  log/${filename}  --chdir ${TOP}/iocBoot ${procServPort} ${TOP}/iocBoot/${filename}
                set +x
        fi
    done
    export BASE_PROCSERV_PORT=${procServPort}
}

copy_to_stream_device(){
    # Params:
    # :1 : CMD_KEY
    # Clear stream-ioc folder
    echo "Copy Stream Device"
    clear_stream_ioc $1

    PROTOCOL="protocol"
    IOC_BOOT="iocBoot"
    DB="database"

    chmod -R 777 server/cmd/

    cp -R server/db/.       ${TOP}/${DB}/
    cp -R server/protocol/. ${TOP}/${PROTOCOL}/
    cp -R server/cmd/.      ${TOP}/${IOC_BOOT}/
    cp server/autosave/*    ${TOP}/autosave
}

build(){
    # Params:
    # :1 : Folder
    # :2 : CMD_KEY
    # :3 : Base Epics CA Port

    # Clear the /cmd folder
    mkdir -p ${1}/server/cmd
    rm       ${1}/server/cmd/*
    cp dbd/* ${TOP}/dbd
    pushd $1
        set -x
        ./generate.py --epics-base ${EPICS_BASE} --asyn ${ASYN} --cmd-prefix ${2} --top ${TOP} ${EPICS_CA_PORT_INCREASE} ${BASE_EPICS_CA_PORT} 
        copy_to_stream_device ${2} $TOP
        set +x
    popd
}
